name: Update AltStore Source

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
      - name: Create or switch to 'altstore'
        run: |
          if git ls-remote --exit-code --heads origin altstore; then
            git checkout altstore
          else
            git checkout -b altstore
          fi
          
      - name: Rebase on 'main'
        run: |
          git fetch origin main
          git rebase --no-interactive origin/main || git rebase --abort
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Record job start time
        id: job_start_time
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        
      - name: Update AltStore source
        id: update_source
        run: |
          python .github/workflows/supporting/update_json.py
          
      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            if git rev-parse --verify HEAD; then
              git commit --amend --no-edit
            else
              git commit -m "Update files via GitHub Actions"
            fi
          fi
          
      - name: Push changes
        run: git push origin altstore --force
        
      - name: Calculate job duration
        id: duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.job_start_time.outputs.start_time}}))
          echo "duration=$duration seconds" >> $GITHUB_OUTPUT
          
      - name: Create job summary
        run: |
          if [[ "${{ steps.update_source.outputs.changes }}" == "true" ]]; then
            echo "## Update Altstore Source Summary 🚀" >> $GITHUB_STEP_SUMMARY
            echo "✅ Changes Detected and Applied" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The apps.json file has been updated with the latest release information." >> $GITHUB_STEP_SUMMARY
          else
            echo "## Update Altstore Source Summary 🚀" >> $GITHUB_STEP_SUMMARY
            echo "🔍 No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The apps.json file is up to date. No changes were necessary." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🕐 Execution Time" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This job took ${{ steps.duration.outputs.duration }} to complete." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📆 Next Scheduled Run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The next scheduled run will be tomorrow at midnight UTC." >> $GITHUB_STEP_SUMMARY
